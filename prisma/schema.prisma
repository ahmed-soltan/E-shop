datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @updatedAt
  role           Role      @default(USER)

  orders   Order[]
  accounts Account[]
  Review   Review[]
}

model Products {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  price       Float
  description String
  brand       String
  category    String
  inStock     Boolean
  
  images      Image[]
  reveiws     Review[]
}

model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  productId   String   @db.ObjectId
  rating      Int
  comment     String
  createdDate DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Products @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  userId          String            @db.ObjectId
  amount          Float
  currency        String
  status          String
  deliveryStatus  String
  paymentIntentId String            @unique
  createdAt       DateTime?         @default(now())
  products        ProductCartType[]
  address         Address?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type ProductCartType {
  id            String
  name          String
  price         Float
  selectedImage Image
  description   String
  quantity      Int
  brand         String
  category      String
  inStock       Boolean
  added         Boolean?
}

type Image {
  color     String
  image     String
  colorCode String
}

type Address {
  city        String
  country     String
  line1       String
  line2       String?
  postal_code String
  state       String
}

enum Role {
  USER
  ADMIN
}
